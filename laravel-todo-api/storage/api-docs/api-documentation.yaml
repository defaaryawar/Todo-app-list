openapi: 3.0.0
info:
  title: Todo List API
  version: 1.0.0
  description: API for Todo List application with user authentication
servers:
  - url: http://localhost:8000/api
    description: Local development server
paths:
  /auth/register:
    post:
      summary: Register a new user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - email
                - password
                - password_confirmation
              properties:
                name:
                  type: string
                  example: John Doe
                email:
                  type: string
                  format: email
                  example: john@example.com
                password:
                  type: string
                  format: password
                  example: Password123!
                password_confirmation:
                  type: string
                  format: password
                  example: Password123!
      responses:
        201:
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  access_token:
                    type: string
                  refresh_token:
                    type: string
                  token_type:
                    type: string
                    example: Bearer
        422:
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
  /auth/login:
    post:
      summary: User login
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: john@example.com
                password:
                  type: string
                  format: password
                  example: Password123!
      responses:
        200:
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  access_token:
                    type: string
                  refresh_token:
                    type: string
                  token_type:
                    type: string
                    example: Bearer
        401:
          description: Invalid credentials
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid login credentials
  /auth/refresh:
    post:
      summary: Refresh access token
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - refresh_token
              properties:
                refresh_token:
                  type: string
      responses:
        200:
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                  refresh_token:
                    type: string
                  token_type:
                    type: string
                    example: Bearer
        401:
          description: Invalid refresh token
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /auth/logout:
    post:
      summary: Logout user
      tags:
        - Authentication
      security:
        - bearerAuth: []
      responses:
        200:
          description: Successfully logged out
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Successfully logged out
        401:
          $ref: '#/components/responses/Unauthorized'
  /auth/user:
    get:
      summary: Get authenticated user
      tags:
        - Authentication
      security:
        - bearerAuth: []
      responses:
        200:
          description: User data
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
        401:
          $ref: '#/components/responses/Unauthorized'
  /todos:
    get:
      summary: Get all todos for the authenticated user
      tags:
        - Todos
      security:
        - bearerAuth: []
      parameters:
        - name: filter[title]
          in: query
          description: Filter by title
          schema:
            type: string
        - name: filter[category]
          in: query
          description: Filter by category (exact match)
          schema:
            type: string
        - name: filter[status]
          in: query
          description: Filter by status
          schema:
            type: string
            enum: [pending, in_progress, completed]
        - name: filter[due_date_between]
          in: query
          description: Filter by due date range (format YYYY-MM-DD,YYYY-MM-DD)
          schema:
            type: string
        - name: sort
          in: query
          description: Sort field (prefix with - for descending order)
          schema:
            type: string
            example: -created_at
        - name: page
          in: query
          description: Page number
          schema:
            type: integer
            default: 1
        - name: per_page
          in: query
          description: Items per page
          schema:
            type: integer
            default: 10
      responses:
        200:
          description: List of todos
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Todo'
                  links:
                    type: object
                  meta:
                    type: object
        401:
          $ref: '#/components/responses/Unauthorized'
    post:
      summary: Create a new todo
      tags:
        - Todos
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TodoInput'
      responses:
        201:
          description: Todo created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Todo created successfully
                  data:
                    $ref: '#/components/schemas/Todo'
        401:
          $ref: '#/components/responses/Unauthorized'
        422:
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
  /todos/{id}:
    get:
      summary: Get a specific todo
      tags:
        - Todos
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Todo details
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Todo'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
    put:
      summary: Update a todo
      tags:
        - Todos
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TodoInput'
      responses:
        200:
          description: Todo updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Todo updated successfully
                  data:
                    $ref: '#/components/schemas/Todo'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        422:
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
    delete:
      summary: Delete a todo (soft delete)
      tags:
        - Todos
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Todo deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Todo deleted successfully
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
  /todos/categories:
    get:
      summary: Get all categories for the authenticated user
      tags:
        - Todos
      security:
        - bearerAuth: []
      responses:
        200:
          description: List of categories
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: string
        401:
          $ref: '#/components/responses/Unauthorized'
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string
          format: email
        created_at:
          type: string
          format: date-time
    Todo:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        description:
          type: string
          nullable: true
        category:
          type: string
          nullable: true
        status:
          type: string
          enum: [pending, in_progress, completed]
        due_date:
          type: string
          format: date
          nullable: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    TodoInput:
      type: object
      properties:
        title:
          type: string
          example: Complete API documentation
        description:
          type: string
          example: Finish the OpenAPI documentation for the Todo API
          nullable: true
        category:
          type: string
          example: Work
          nullable: true
        status:
          type: string
          enum: [pending, in_progress, completed]
          example: pending
          nullable: true
        due_date:
          type: string
          format: date
          example: 2025-05-20
          nullable: true
    ValidationError:
      type: object
      properties:
        message:
          type: string
          example: The given data was invalid.
        errors:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
  responses:
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Unauthenticated.
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Unauthorized access
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Resource not found.
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT